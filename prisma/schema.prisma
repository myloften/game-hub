generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  comments      Comment[]
  favorites     Favorite[]
  playHistory   PlayHistory[]
  ratings       Rating[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  category    String
  iframeUrl   String
  iframeWidth Int      @default(800)
  iframeHeight Int     @default(600)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Comment[]
  favorites   Favorite[]
  playHistory PlayHistory[]
  ratings     Rating[]
}

model Rating {
  id        String   @id @default(cuid())
  value     Float
  gameId    String
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  gameId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
}

model PlayHistory {
  id       String   @id @default(cuid())
  userId   String
  gameId   String
  playedAt DateTime @default(now())
  duration Int      @default(0)
  game     Game     @relation(fields: [gameId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}
