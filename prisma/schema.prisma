// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  ratings       Rating[]
  comments      Comment[]
  playHistory   PlayHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id            String    @id @default(cuid())
  title         String
  description   String
  imageUrl      String
  gameUrl       String
  category      String
  iframeWidth   Int         @default(800)
  iframeHeight  Int         @default(600)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  favorites     Favorite[]
  ratings       Rating[]
  comments      Comment[]
  playHistory   PlayHistory[]
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  gameId    String
  userId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gameId])
  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId])
}

model PlayHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  playedAt  DateTime @default(now())
  duration  Int      @default(0) // 游戏时长（秒）
}
